--- a\minicraft\entity\mob\Player.java
+++ b\minicraft\entity\mob\Player.java
@@ -60,26 +60,26 @@
 
 public class Player extends Mob implements ItemHolder, ClientTickable {
 	protected InputHandler input;
-	
+
 	private static final int playerHurtTime = 30;
 	public static final int INTERACT_DIST = 12;
 	private static final int ATTACK_DIST = 20;
-	
+
 	private static final int mtm = 300; // Time given to increase multiplier before it goes back to 1.
 	public static final int MAX_MULTIPLIER = 50; // Maximum score multiplier.
-	
+
 	public double moveSpeed = 1; // The number of coordinate squares to move; each tile is 16x16.
 	private int score; // The player's score
-	
+
 	private int multipliertime = mtm; // Time left on the current multiplier.
 	private int multiplier = 1; // Score multiplier
-	
+
 	// These 2 ints are ints saved from the first spawn - this way the spawn pos is always saved.
 	public int spawnx = 0, spawny = 0; // These are stored as tile coordinates, not entity coordinates.
 	//public boolean bedSpawn = false;
 
 	public boolean suitOn;
-	
+
 	// The maximum stats that the player can have.
 	public static final int maxStat = 10;
 	public static final int maxHealth = maxStat, maxStamina = maxStat, maxHunger = maxStat;
@@ -91,25 +91,25 @@
 	public static MobSprite[][] suitSprites;
 
 	private Inventory inventory;
-	
+
 	public Item activeItem;
 	Item attackItem; // attackItem is useful again b/c of the power glove.
 	private Item prevItem; // Holds the item held before using the POW glove.
-	
+
 	int attackTime;
 	public Direction attackDir;
-	
+
 	private int onStairDelay; // The delay before changing levels.
 	private int onFallDelay; // The delay before falling b/c we're on an InfiniteFallTile
-	
+
 	public int hunger, stamina, armor; // The current stats
 	public int armorDamageBuffer;
 	@Nullable public ArmorItem curArmor; // The color/type of armor to be displayed.
-	
+
 	private int staminaRecharge; // The ticks before charging a bolt of the player's stamina
 	private static final int maxStaminaRecharge = 10; // Cutoff value for staminaRecharge
 	public int staminaRechargeDelay; // The recharge delay ticks when the player uses up their stamina.
-	
+
 	private int hungerStamCnt, stamHungerTicks; // Tiers of hunger penalties before losing a burger.
 	private static final int maxHungerTicks = 400; // The cutoff value for stamHungerTicks
 	private static final int[] maxHungerStams = {10, 7, 5}; // TungerStamCnt required to lose a burger.
@@ -119,12 +119,12 @@
 	private int stepCount; // Used to penalize hunger for movement.
 	private int hungerChargeDelay; // The delay between each time the hunger bar increases your health
 	private int hungerStarveDelay; // The delay between each time the hunger bar decreases your health
-	
+
 	public HashMap<PotionType, Integer> potioneffects; // The potion effects currently applied to the player
 	public boolean showpotioneffects; // Whether to display the current potion effects on screen
 	private int cooldowninfo; // Prevents you from toggling the info pane on and off super fast.
 	private int regentick; // Counts time between each time the regen potion effect heals you.
-	
+
 	//private final int acs = 25; // Default ("start") arrow count
 	public int shirtColor = Color.get(1, 51, 51, 0); // Player shirt color.
 
@@ -132,9 +132,9 @@
 	public int maxFishingTicks = 120;
 	public int fishingTicks = maxFishingTicks;
 	public int fishingLevel;
-	
+
 	// Note: the player's health & max health are inherited from Mob.java
-	
+
 	public String getDebugHunger() { return hungerStamCnt+"_"+stamHungerTicks; }
 
 	public Player(@Nullable Player previousInstance, InputHandler input) {
@@ -144,7 +144,7 @@
 		y = 24;
 		this.input = input;
 		inventory = new Inventory() {
-			
+
 			@Override
 			public void add(int idx, Item item) {
 				if (Game.isMode("creative")) {
@@ -155,7 +155,7 @@
 				}
 				super.add(idx, item);
 			}
-			
+
 			@Override
 			public Item remove(int idx) {
 				if (Game.isMode("creative")) {
@@ -171,29 +171,29 @@
 				return super.remove(idx);
 			}
 		};
-		
+
 		//if(previousInstance == null)
 		//	inventory.add(Items.arrowItem, acs);
-		
+
 		potioneffects = new HashMap<>();
 		showpotioneffects = true;
-		
+
 		cooldowninfo = 0;
 		regentick = 0;
-		
+
 		attackDir = dir;
 		armor = 0;
 		curArmor = null;
 		armorDamageBuffer = 0;
 		stamina = maxStamina;
 		hunger = maxHunger;
-		
+
 		hungerStamCnt = maxHungerStams[Settings.getIdx("diff")];
 		stamHungerTicks = maxHungerTicks;
-		
+
 		if (Game.isMode("creative"))
 			Items.fillCreativeInv(inventory);
-		
+
 		if (previousInstance != null) {
 			spawnx = previousInstance.spawnx;
 			spawny = previousInstance.spawny;
@@ -210,34 +210,34 @@
 		suitSprites = selectedSkin[2];
 		carrySuitSprites = selectedSkin[3];
 	}
-	
+
 	public int getMultiplier() { return Game.isMode("score") ? multiplier : 1; }
-	
+
 	void resetMultiplier() {
 		multiplier = 1;
 		multipliertime = mtm;
 	}
-	
+
 	public void addMultiplier(int value) {
 		if (!Game.isMode("score")) return;
 		multiplier = Math.min(MAX_MULTIPLIER, multiplier+value);
 		multipliertime = Math.max(multipliertime, mtm - 5);
 	}
-	
+
 	public void tickMultiplier() {
 		if ((Game.ISONLINE || !Updater.paused) && multiplier > 1) {
 			if (multipliertime != 0) multipliertime--;
 			if (multipliertime <= 0) resetMultiplier();
 		}
 	}
-	
+
 	public int getScore() { return score; }
 	public void setScore(int score) { this.score = score; }
 	public void addScore(int points) {
 		if (!Game.isValidClient()) // The server will handle the score.
 			score += points * getMultiplier();
 	}
-	
+
 	/**
 	 * Adds a new potion effect to the player.
 	 * @param type Type of potion.
@@ -246,7 +246,7 @@
 	public void addPotionEffect(PotionType type, int duration) {
 		potioneffects.put(type, duration);
 	}
-	
+
 	/**
 	 * Adds a potion effect to the player.
 	 * @param type Type of effect.
@@ -254,24 +254,24 @@
 	public void addPotionEffect(PotionType type) {
 		addPotionEffect(type, type.duration);
 	}
-	
+
 	/**
 	 * Returns all the potion effects currently affecting the player.
 	 * @return all potion effects on the player.
 	 */
 	public HashMap<PotionType, Integer> getPotionEffects() { return potioneffects; }
-	
+
 	@Override
 	public void tick() {
 		if (level == null || isRemoved()) return;
-		
+
 		if (Game.getMenu() != null && !Game.ISONLINE) return; // Don't tick player when menu is open
-		
+
 		super.tick(); // Ticks Mob.java
-		
+
 		if (!Game.isValidClient())
 			tickMultiplier();
-		
+
 		if (potioneffects.size() > 0 && !Bed.inBed(this)) {
 			for (PotionType potionType: potioneffects.keySet().toArray(new PotionType[0])) {
 				if (potioneffects.get(potionType) <= 1) // If time is zero (going to be set to 0 in a moment)...
@@ -294,14 +294,14 @@
 				fishingTicks = maxFishingTicks;
 			}
 		}
-		
+
 		if(cooldowninfo > 0) cooldowninfo--;
-		
+
 		if(input.getKey("potionEffects").clicked && cooldowninfo == 0) {
 			cooldowninfo = 10;
 			showpotioneffects = !showpotioneffects;
 		}
-		
+
 		Tile onTile = level.getTile(x >> 4, y >> 4); // Gets the current tile the player is on.
 		if (onTile == Tiles.get("Stairs Down") || onTile == Tiles.get("Stairs Up")) {
 			if (onStairDelay <= 0) { // When the delay time has passed...
@@ -309,7 +309,7 @@
 				onStairDelay = 10; // Resets delay, since the level has now been changed.
 				return; // SKIPS the rest of the tick() method.
 			}
-			
+
 			onStairDelay = 10; // Resets the delay, if on a stairs tile, but the delay is greater than 0. In other words, this prevents you from ever activating a level change on a stair tile, UNTIL you get off the tile for 10+ ticks.
 		} else if (onStairDelay > 0) onStairDelay--; // Decrements stairDelay if it's > 0, but not on stair tile... does the player get removed from the tile beforehand, or something?
 
@@ -326,61 +326,61 @@
 			stamina = maxStamina;
 			hunger = maxHunger;
 		}
-		
+
 		// Remember: staminaRechargeDelay is a penalty delay for when the player uses up all their stamina.
 		// staminaRecharge is the rate of stamina recharge, in some sort of unknown units.
 		if (stamina <= 0 && staminaRechargeDelay == 0 && staminaRecharge == 0) {
 			staminaRechargeDelay = 40; // Delay before resuming adding to stamina.
 		}
-		
+
 		if (staminaRechargeDelay > 0 && stamina < maxStamina) staminaRechargeDelay--;
-		
+
 		if (staminaRechargeDelay == 0) {
 			staminaRecharge++; // Ticks since last recharge, accounting for the time potion effect.
-			
+
 			if (isSwimming() && !potioneffects.containsKey(PotionType.Swim)) staminaRecharge = 0; // Don't recharge stamina while swimming.
-			
+
 			// Recharge a bolt for each multiple of maxStaminaRecharge.
 			while (staminaRecharge > maxStaminaRecharge) {
 				   staminaRecharge -= maxStaminaRecharge;
 				if (stamina < maxStamina) stamina++; // Recharge one stamina bolt per "charge".
 			}
 		}
-		
+
 		int diffIdx = Settings.getIdx("diff");
-		
+
 		if (hunger < 0) hunger = 0; // Error correction
-		
+
 		if (stamina < maxStamina) {
 			stamHungerTicks-=diffIdx; // Affect hunger if not at full stamina; this is 2 levels away from a hunger "burger".
 			if( stamina == 0) stamHungerTicks-=diffIdx; // Double effect if no stamina at all.
 		}
-		
+
 		// This if statement encapsulates the hunger system
 		if(!Bed.inBed(this)) {
 			if (hungerChargeDelay > 0) { // If the hunger is recharging health...
 				stamHungerTicks -= 2+diffIdx; // Penalize the hunger
 				if (hunger == 0) stamHungerTicks -= diffIdx; // Further penalty if at full hunger
 			}
-			
+
 			if (Updater.tickCount % Player.hungerTickCount[diffIdx] == 0)
 				stamHungerTicks--; // hunger due to time.
-			
+
 			if (stepCount >= Player.hungerStepCount[diffIdx]) {
 				stamHungerTicks--; // hunger due to exercise.
 				stepCount = 0; // reset.
 			}
-			
+
 			if (stamHungerTicks <= 0) {
 				stamHungerTicks += maxHungerTicks; // Reset stamHungerTicks
 				hungerStamCnt--; // Enter 1 level away from burger.
 			}
-			
+
 			while (hungerStamCnt <= 0) {
 				hunger--; // Reached burger level.
 				hungerStamCnt += maxHungerStams[diffIdx];
 			}
-			
+
 			/// System that heals you depending on your hunger
 			if (health < maxHealth && hunger > maxHunger/2) {
 				hungerChargeDelay++;
@@ -390,11 +390,11 @@
 				}
 			}
 			else hungerChargeDelay = 0;
-			
+
 			if (hungerStarveDelay == 0) {
 				hungerStarveDelay = 120;
 			}
-			
+
 			if (hunger == 0 && health > minStarveHealth[diffIdx]) {
 				if (hungerStarveDelay > 0) hungerStarveDelay--;
 				if (hungerStarveDelay == 0) {
@@ -402,7 +402,7 @@
 				}
 			}
 		}
-		
+
 		// regen health
 		if (potioneffects.containsKey(PotionType.Regen)) {
 			regentick++;
@@ -413,10 +413,10 @@
 				}
 			}
 		}
-		
+
 		if (Updater.savecooldown > 0 && !Updater.saving)
 			Updater.savecooldown--;
-		
+
 
 		// Handle player input. Input is handled by the menu if we are in one.
 		if (Game.getMenu() == null && !Bed.inBed(this)) {
@@ -430,7 +430,7 @@
 				if (input.getKey("move-left").down) vec.x--;
 				if (input.getKey("move-right").down) vec.x++;
 			}
-			
+
 			// Executes if not saving; and... essentially halves speed if out of stamina.
 			if ((vec.x != 0 || vec.y != 0) && (staminaRechargeDelay % 2 == 0 || isSwimming()) && !Updater.saving) {
 				double spd = moveSpeed * (potioneffects.containsKey(PotionType.Speed) ? 1.5D : 1);
@@ -448,16 +448,16 @@
 				boolean moved = move(xd, yd); // THIS is where the player moves; part of Mob.java
 				if (moved) stepCount++;
 			}
-			
-			
+
+
 			if (isSwimming() && tickTime % 60 == 0 && !potioneffects.containsKey(PotionType.Swim)) { // If drowning... :P
 				if (stamina > 0) payStamina(1); // Take away stamina
 				else hurt(this, 1, Direction.NONE); // If no stamina, take damage.
 			}
-			
+
 			if (activeItem != null && (input.getKey("drop-one").clicked || input.getKey("drop-stack").clicked)) {
 				Item drop = activeItem.clone();
-				
+
 				if (input.getKey("drop-one").clicked && drop instanceof StackableItem && ((StackableItem)drop).count > 1) {
 					// Drop one from stack
 					((StackableItem)activeItem).count--;
@@ -465,23 +465,23 @@
 				} else if (!Game.isMode("creative")) {
 					activeItem = null; // Remove it from the "inventory"
 				}
-				
+
 				if (Game.isValidClient())
 					Game.client.dropItem(drop);
 				else
 					level.dropItem(x, y, drop);
 			}
-			
+
 			if ((activeItem == null || !activeItem.used_pending) && (input.getKey("attack").clicked) && stamina != 0 && onFallDelay <= 0) { // This only allows attacks when such action is possible.
 				if (!potioneffects.containsKey(PotionType.Energy)) stamina--;
 				staminaRecharge = 0;
 
 				attack();
-				
+
 				if (Game.ISONLINE && activeItem != null && activeItem.interactsWithWorld() && !(activeItem instanceof ToolItem))
 					activeItem.used_pending = true;
 			}
-			
+
 			if (input.getKey("menu").clicked && activeItem != null) {
 				inventory.add(0, activeItem);
 				activeItem = null;
@@ -521,16 +521,16 @@
 						resolveHeldItem();
 				}
 			}
-			
+
 			if (attackTime > 0) {
 				attackTime--;
 				if(attackTime == 0) attackItem = null; // null the attackItem once we are done attacking.
 			}
 		}
-		
+
 		if (Game.isConnectedClient() && this == Game.player) Game.client.sendPlayerUpdate(this);
 	}
-	
+
 	/**
 	 * Removes an held item and places it back into the inventory.
 	 * Looks complicated to so it can handle the powerglove.
@@ -578,7 +578,7 @@
 			}
 			return;
 		}
-		
+
 		// If this is a multiplayer game, than the server will execute the full method instead.
 		if (Game.isConnectedClient()) {
 			attackDir = dir;
@@ -586,9 +586,9 @@
 				attackTime = 10;
 			else
 				attackTime = 5;
-			
+
 			attackItem = activeItem;
-			
+
 			Game.client.requestInteraction(this);
 			// We are going to use an arrow.
 			if((activeItem instanceof ToolItem) // Is the player currently holding a tool?
@@ -599,10 +599,10 @@
 			}
 			return;
 		}
-		
+
 		attackDir = dir; // Make the attack direction equal the current direction
 		attackItem = activeItem; // Make attackItem equal activeItem
-		
+
 		// If we are holding an item.
 		if (activeItem != null) {
 			attackTime = 10;
@@ -612,11 +612,11 @@
 			if (activeItem instanceof ToolItem && stamina - 1 >= 0) {
 				ToolItem tool = (ToolItem) activeItem;
 				if (tool.type == ToolType.Bow && tool.dur > 0 && inventory.count(Items.arrowItem) > 0) {
-					
+
 					if (!Game.isMode("creative")) inventory.removeItem(Items.arrowItem);
-					level.add(new Arrow(this, attackDir, tool.level));
+					level.add(new Arrow(this, attackDir, ToolItem.LEVELS.get(tool.level)));
 					attackTime = 10;
-					
+
 					if (!Game.isMode("creative")) tool.dur--;
 					return;
 				}
@@ -624,7 +624,7 @@
 
 			// If the interaction between you and an entity is successful, then return.
 			if (interact(getInteractionBox(INTERACT_DIST))) return;
-			
+
 			// Attempt to interact with the tile.
 			Point t = getInteractionTile();
 
@@ -647,12 +647,12 @@
 						done = true;
 					}
 				}
-				
+
 				if (Game.isValidServer() && this instanceof RemotePlayer) { // Only do this if no interaction was actually made; b/c a tile update packet will generally happen then anyway.
 					minicraft.network.MinicraftServerThread thread = Game.server.getAssociatedThread((RemotePlayer)this);
 					thread.sendTileUpdate(level, t.x, t.y); /// FIXME this part is as a semi-temporary fix for those odd tiles that don't update when they should; instead of having to make another system like the entity additions and removals (and it wouldn't quite work as well for this anyway), this will just update whatever tile the player interacts with (and fails, since a successful interaction changes the tile and therefore updates it anyway).
 				}
-				
+
 				if (!Game.isMode("creative") && activeItem.isDepleted()) {
 					// If the activeItem has 0 items left, then "destroy" it.
 					activeItem = null;
@@ -660,12 +660,12 @@
 			}
 			if (done) return; // Skip the rest if interaction was handled
 		}
-		
+
 		if (activeItem == null || activeItem.canAttack()) { // If there is no active item, OR if the item can be used to attack...
 			attackTime = 5;
 			// Attacks the enemy in the appropriate direction.
 			boolean used = hurt(getInteractionBox(ATTACK_DIST));
-			
+
 			// Attempts to hurt the tile in the appropriate direction.
 			Point t = getInteractionTile();
 
@@ -674,36 +674,36 @@
 				Tile tile = level.getTile(t.x, t.y);
 				used = tile.hurt(level, t.x, t.y, this, random.nextInt(3) + 1, attackDir) || used;
 			}
-			
+
 			if (used && activeItem instanceof ToolItem)
 				((ToolItem)activeItem).payDurability();
 		}
 	}
-	
+
 	private Rectangle getInteractionBox(int range) {
 		int x = this.x, y = this.y - 2;
-		
+
 		//noinspection UnnecessaryLocalVariable
 		int paraClose = 4, paraFar = range;
 		int perpClose = 0, perpFar = 8;
-		
+
 		int xClose = x + dir.getX()*paraClose + dir.getY()*perpClose;
 		int yClose = y + dir.getY()*paraClose + dir.getX()*perpClose;
 		int xFar = x + dir.getX()*paraFar + dir.getY()*perpFar;
 		int yFar = y + dir.getY()*paraFar + dir.getX()*perpFar;
-		
+
 		return new Rectangle(Math.min(xClose, xFar), Math.min(yClose, yFar), Math.max(xClose, xFar), Math.max(yClose, yFar), Rectangle.CORNERS);
 	}
-	
+
 	private Point getInteractionTile() {
 		int x = this.x, y = this.y - 2;
-		
+
 		x += dir.getX()*INTERACT_DIST;
 		y += dir.getY()*INTERACT_DIST;
-		
+
 		return new Point(x >> 4, y >> 4);
 	}
-	
+
 	private void goFishing() {
 		int fcatch = random.nextInt(100);
 
@@ -723,11 +723,11 @@
 
 		if (data != null) { // If you've caught something
 			for (String line: data) {
-				
+
 				// Check all the entries in the data
 				// The number is a percent, if one fails, it moves down the list
 				// For entries with a "," it chooses between the options
-				
+
 				int chance = Integer.parseInt(line.split(":")[0]);
 				String itemData = line.split(":")[1];
 				if (random.nextInt(100) + 1 <= chance) {
@@ -758,9 +758,9 @@
 		}
 		fishingTicks = maxFishingTicks; // If you didn't catch anything, try again in 120 ticks
 	}
-	
+
 	private boolean use() { return use(getInteractionBox(INTERACT_DIST)); }
-	
+
 	/** called by other use method; this serves as a buffer in case there is no entity in front of the player. */
 	private boolean use(Rectangle area) {
 		List<Entity> entities = level.getEntitiesInRect(area); // Gets the entities within the 4 points
@@ -769,7 +769,7 @@
 		}
 		return false;
 	}
-	
+
 	/** same, but for interaction. */
 	private boolean interact(Rectangle area) {
 		List<Entity> entities = level.getEntitiesInRect(area);
@@ -778,7 +778,7 @@
 		}
 		return false;
 	}
-	
+
 	/** same, but for attacking. */
 	private boolean hurt(Rectangle area) {
 		List<Entity> entities = level.getEntitiesInRect(area);
@@ -794,7 +794,7 @@
 		}
 		return maxDmg > 0;
 	}
-	
+
 	/**
 	 * Calculates how much damage the player will do.
 	 * @param e Entity being attacked.
@@ -931,9 +931,9 @@
 
 	/** What happens when the player interacts with a itemEntity */
 	public void pickupItem(ItemEntity itemEntity) {
-		
+
 		Sound.pickup.play();
-		
+
 		itemEntity.remove();
 		addScore(1);
 		if (Game.isMode("creative")) return; // We shall not bother the inventory on creative mode.

