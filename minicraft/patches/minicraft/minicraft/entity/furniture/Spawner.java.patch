--- a\minicraft\entity\furniture\Spawner.java
+++ b\minicraft\entity\furniture\Spawner.java
@@ -22,17 +22,17 @@
 import minicraft.item.ToolType;
 
 public class Spawner extends Furniture {
-	
+
 	private Random rnd = new Random();
-	
+
 	private static final int ACTIVE_RADIUS = 8*16;
 	private static final int minSpawnInterval = 200, maxSpawnInterval = 500;
 	private static final int minMobSpawnChance = 10; // 1 in minMobSpawnChance chance of calling trySpawn every interval.
-	
+
 	public MobAi mob;
 	private int health, lvl, maxMobLevel;
 	private int spawnTick;
-	
+
 	/**
 	 * Initializes the spawners variables to the corresponding values from the mob.
 	 * @param m The mob which this spawner will spawn.
@@ -40,7 +40,7 @@
 	private void initMob(MobAi m) {
 		mob = m;
 		sprite.color = col = mob.col;
-		
+
 		if (m instanceof EnemyMob) {
 			lvl = ((EnemyMob)mob).lvl;
 			maxMobLevel = mob.getMaxLevel();
@@ -53,7 +53,7 @@
 			lvl = maxMobLevel;
 		}
 	}
-	
+
 	/**
 	 * Creates a new spawner for the mob m.
 	 * @param m Mob which will be spawned.
@@ -64,7 +64,7 @@
 		initMob(m);
 		resetSpawnInterval();
 	}
-	
+
 	/**
 	 * Returns the classname of a class.
 	 * @param c The class.
@@ -74,11 +74,11 @@
 		String fullName = c.getCanonicalName();
 		return fullName.substring(fullName.lastIndexOf(".")+1);
 	}
-	
+
 	@Override
 	public void tick() {
 		super.tick();
-		
+
 		spawnTick--;
 		if (spawnTick <= 0) {
 			int chance = (int) (minMobSpawnChance * Math.pow(level.mobCount, 2) / Math.pow(level.maxMobCount, 2)); // This forms a quadratic function that determines the mob spawn chance.
@@ -87,28 +87,28 @@
 			resetSpawnInterval();
 		}
 	}
-	
+
 	/**
 	 * Resets the spawner so it can spawn another mob.
 	 */
 	private void resetSpawnInterval() {
 		spawnTick = rnd.nextInt(maxSpawnInterval - minSpawnInterval + 1) + minSpawnInterval;
 	}
-	
+
 	/**
 	 * Tries to spawn a new mob.
 	 */
 	private void trySpawn() {
 		if (level == null || Game.isValidClient()) return;
 		if (level.mobCount >= level.maxMobCount) return; // Can't spawn more entities
-		
+
 		Player player = getClosestPlayer();
 		if (player == null) return;
 		int xd = player.x - x;
 		int yd = player.y - y;
-		
+
 		if (xd * xd + yd * yd > ACTIVE_RADIUS * ACTIVE_RADIUS) return;
-		
+
 		MobAi newmob;
 		try {
 			if (mob instanceof EnemyMob)
@@ -121,22 +121,22 @@
 			ex.printStackTrace();
 			return;
 		}
-		
+
 		Point pos = new Point(x >> 4, y >> 4);
 		Point[] areaPositions = level.getAreaTilePositions(pos.x, pos.y, 1);
 		ArrayList<Point> validPositions = new ArrayList<>();
 		for (Point p: areaPositions)
 			if (!( !level.getTile(p.x, p.y).mayPass(level, p.x, p.y, newmob) || mob instanceof EnemyMob && level.getTile(p.x, p.y).getLightRadius(level, p.x, p.y) > 0 ))
 				validPositions.add(p);
-		
+
 		if(validPositions.size() == 0) return; // Cannot spawn mob.
-		
+
 		Point spawnPos = validPositions.get(random.nextInt(validPositions.size()));
-		
+
 		newmob.x = spawnPos.x << 4;
 		newmob.y = spawnPos.y << 4;
 		//if (Game.debug) level.printLevelLoc("spawning new " + mob, (newmob.x >> 4), (newmob.y >> 4), "...");
-		
+
 		level.add(newmob);
 		Sound.monsterHurt.play();
 		for (int i = 0; i < 6; i++) {
@@ -145,27 +145,27 @@
 			 level.add(new FireParticle(x - 8 + randX, y - 6 + randY));
 		}
 	}
-	
+
 	@Override
 	public boolean interact(Player player, Item item, Direction attackDir) {
 		if (item instanceof ToolItem) {
 			ToolItem tool = (ToolItem)item;
-			
+
 			Sound.monsterHurt.play();
-			
+
 			int dmg;
 			if (Game.isMode("creative"))
 				dmg = health;
 			else {
-				dmg = tool.level + random.nextInt(2);
-				
+				dmg = ToolItem.LEVELS.get(tool.level) + random.nextInt(2);
+
 				if (tool.type == ToolType.Pickaxe)
 					dmg += random.nextInt(5) + 2;
-				
+
 				if (player.potioneffects.containsKey(PotionType.Haste))
 					dmg *= 2;
 			}
-			
+
 			health -= dmg;
 			level.add(new TextParticle("" + dmg, x, y, Color.get(-1, 200, 300, 400)));
 			if (health <= 0) {
@@ -173,7 +173,7 @@
 				Sound.playerDeath.play();
 				player.addScore(500);
 			}
-			
+
 			return true;
 		}
 
@@ -184,12 +184,12 @@
 			player.activeItem = new FurnitureItem(this);
 			return true;
 		}
-		
+
 		if (item == null) return use(player);
-		
+
 		return false;
 	}
-	
+
 	@Override
 	@SuppressWarnings("JavaReflectionMemberAccess")
 	public boolean use(Player player) {
@@ -204,21 +204,21 @@
 			}
 			return true;
 		}
-		
+
 		return false;
 	}
 
 	public Furniture clone() { return new Spawner(mob); }
-	
+
 	@Override
 	protected String getUpdateString() {
 		String updates = super.getUpdateString() + ";";
 		updates += "health,"+health+
 		";lvl," + lvl;
-		
+
 		return updates;
 	}
-	
+
 	@Override
 	protected boolean updateField(String field, String val) {
 		if (super.updateField(field, val)) return true;
@@ -226,7 +226,7 @@
 			case "health": health = Integer.parseInt(val); return true;
 			case "lvl": lvl = Integer.parseInt(val); return true;
 		}
-		
+
 		return false;
 	}
 }

