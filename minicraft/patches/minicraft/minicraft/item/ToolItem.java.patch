--- a\minicraft\item\ToolItem.java	2021-09-08 21:34:58.000000000 +0800
+++ b\minicraft\item\ToolItem.java	2022-09-13 19:44:12.317013500 +0800
@@ -2,6 +2,8 @@
 
 import java.util.ArrayList;
 import java.util.Random;
+import java.util.HashMap;
+import java.util.Map;
 
 import minicraft.core.Game;
 import minicraft.core.io.Localization;
@@ -16,7 +18,7 @@
 
 		for (ToolType tool : ToolType.values()) {
 			if (!tool.noLevel) {
-				for (int lvl = 0; lvl <= 4; lvl++)
+				for (String lvl : LEVELS.keySet())
 					items.add(new ToolItem(tool, lvl));
 			} else {
 				items.add(new ToolItem(tool));
@@ -28,20 +30,26 @@
 	
 	private Random random = new Random();
 	
-	public static final String[] LEVEL_NAMES = {"Wood", "Rock", "Iron", "Gold", "Gem"}; // The names of the different levels. A later level means a stronger tool.
+	public static final HashMap<String, Integer> LEVELS = new HashMap<String, Integer>() {{
+		put("Wood", 0);
+		put("Rock", 1);
+		put("Iron", 2);
+		put("Gold", 3);
+		put("Gem", 4);
+	}}; // The names of the different levels. A later level means a stronger tool.
 	
 	public ToolType type; // Type of tool (Sword, hoe, axe, pickaxe, shovel)
-	public int level; // Level of said tool
+	public String level; // Level of said tool
 	public int dur; // The durability of the tool
 	
 	/** Tool Item, requires a tool type (ToolType.Sword, ToolType.Axe, ToolType.Hoe, etc) and a level (0 = wood, 2 = iron, 4 = gem, etc) */
-	public ToolItem(ToolType type, int level) {
-		super(LEVEL_NAMES[level] + " " + type.name(), new Sprite(type.xPos, type.yPos + level, 0));
+	public ToolItem(ToolType type, String level) {
+		super(level + " " + type.name(), new Sprite(type.xPos, type.yPos + LEVELS.get(level), 0));
 		
 		this.type = type;
 		this.level = level;
 		
-		dur = type.durability * (level + 1); // Initial durability fetched from the ToolType
+		dur = type.durability * (LEVELS.get(level) + 1); // Initial durability fetched from the ToolType
 	}
 
 	public ToolItem(ToolType type) {
@@ -51,10 +59,16 @@
 		dur = type.durability;
 	}
 	
+	/** Uses this method for sprite customization. */
+	public ToolItem setSprite(Sprite sprite) {
+		this.sprite = sprite;
+		return this;
+	}
+
 	/** Gets the name of this tool (and it's type) as a display string. */
 	@Override
 	public String getDisplayName() {
-		if (!type.noLevel) return " " + Localization.getLocalized(LEVEL_NAMES[level]) + " " + Localization.getLocalized(type.toString());
+		if (!type.noLevel) return " " + Localization.getLocalized(level) + " " + Localization.getLocalized(type.toString());
 		else return " " + Localization.getLocalized(type.toString());
 	}
 	
@@ -80,13 +94,13 @@
 		
 		if (e instanceof Mob) {
 			if (type == ToolType.Axe) {
-				return (level + 1) * 2 + random.nextInt(4); // Wood axe damage: 2-5; gem axe damage: 10-13.
+				return (LEVELS.get(level) + 1) * 2 + random.nextInt(4); // Wood axe damage: 2-5; gem axe damage: 10-13.
 			}
 			if (type == ToolType.Sword) {
-				return (level + 1) * 3 + random.nextInt(2 + level * level); // Wood: 3-5 damage; gem: 15-32 damage.
+				return (LEVELS.get(level) + 1) * 3 + random.nextInt(2 + LEVELS.get(level) * LEVELS.get(level)); // Wood: 3-5 damage; gem: 15-32 damage.
 			}
 			if (type == ToolType.Claymore) {
-				return (level + 1) * 3 + random.nextInt(4 + level * level * 3); // Wood: 3-6 damage; gem: 15-66 damage.
+				return (LEVELS.get(level) + 1) * 3 + random.nextInt(4 + LEVELS.get(level) * LEVELS.get(level) * 3); // Wood: 3-6 damage; gem: 15-66 damage.
 			}
 			return 1; // All other tools do very little damage to mobs.
 		}
@@ -110,7 +124,7 @@
 	}
 	
 	@Override
-	public int hashCode() { return type.name().hashCode() + level; }
+	public int hashCode() { return type.name().hashCode() + level.hashCode(); }
 	
 	public ToolItem clone() {
 		ToolItem ti;
