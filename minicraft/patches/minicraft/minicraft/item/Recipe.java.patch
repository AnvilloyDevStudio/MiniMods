--- a\minicraft\item\Recipe.java	2021-09-08 21:34:58.000000000 +0800
+++ b\minicraft\item\Recipe.java	2022-12-27 01:52:07.212862700 +0800
@@ -1,11 +1,17 @@
 package minicraft.item;
 
-import java.util.HashMap;
-
 import minicraft.core.Game;
 import minicraft.entity.mob.Player;
 
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Set;
+
 public class Recipe {
+	public static final HashMap<String, HashSet<String>> costSets = new HashMap<>();
+
 	private HashMap<String, Integer> costs = new HashMap<String, Integer>();  // A list of costs for the recipe
 	private String product; // The result item of the recipe
 	private int amount;
@@ -78,4 +84,197 @@
 		
 		return true;
 	}
+
+	// This plan is deprecated.
+	public static class RecipeCost {
+		private HashMap<String, Integer> costs = new HashMap<>();
+		private Set<String> items = new HashSet<>();
+		int defaultAmount;
+
+		/**
+		 * Initializing the instance with singleton item.
+		 * @param item The item as the cost.
+		 * @param amount The amount of the item required as cost.
+		 */
+		public RecipeCost(String item, int amount) {
+			costs.put(item, amount);
+			items.add(item);
+			defaultAmount = amount;
+		}
+		/**
+		 * Initializing the instance with the specified items.
+		 * @param amount The amount of the item required of one as cost.
+		 * @param items The items as the cost.
+		 */
+		public RecipeCost(int amount, String... items) {
+			for (String item : items)
+				costs.put(item, amount);
+			this.items.addAll(Arrays.asList(items));
+			defaultAmount = amount;
+		}
+		/**
+		 * Initializing the instance with the specified items.
+		 * @param amount The amount of the item required of one as cost.
+		 * @param items The items as the cost.
+		 */
+		public RecipeCost(int amount, Collection<String> items) {
+			for (String item : items)
+				costs.put(item, amount);
+			this.items.addAll(items);
+			defaultAmount = amount;
+		}
+		/**
+		 * Initializing the instance with the specified items.
+		 * @param amount The amount of the item required of one as cost.
+		 * @param items The items as the cost.
+		 * @param link Whether to use the given set instance or not.
+		 */
+		public RecipeCost(int amount, Set<String> items, boolean link) {
+			defaultAmount = amount;
+			for (String item : items)
+				costs.put(item, amount);
+			if (link)
+				this.items = items;
+			else
+				this.items.addAll(items);
+		}
+		/**
+		 * Initializing the instance with the specified item set.
+		 * @param defaultAmount The default amount of the newly added item required of one as cost.
+		 * @param costs The cost mapping.
+		 * @param link Whether to use the given map instance or not.
+		 */
+		public RecipeCost(int defaultAmount, HashMap<String, Integer> costs, boolean link) {
+			this.defaultAmount = defaultAmount;
+			if (link) {
+				this.costs = costs;
+				this.items.addAll(costs.keySet());
+			} else {
+				this.costs.putAll(costs);
+				this.items.addAll(costs.keySet());
+			}
+		}
+		/**
+		 * Initializing the instance with the specified item set.
+		 * Warning: The map {@code costs} may be modified (add and remove) to synchronize all the values in the set {@code items}.
+		 * @param defaultAmount The default amount of the newly added item required of one as cost.
+		 * @param items The items as the cost.
+		 * @param costs The cost mapping.
+		 * @param link Whether to use the given map and set instances or not.
+		 */
+		public RecipeCost(int defaultAmount, HashSet<String> items, HashMap<String, Integer> costs, boolean link) {
+			this.defaultAmount = defaultAmount;
+			if (link) {
+				this.costs = costs;
+				this.items = items;
+			} else {
+				this.costs.putAll(costs);
+				this.items.addAll(items);
+			}
+
+			for (String item : items) {
+				if (!costs.containsKey(item))
+					costs.put(item, defaultAmount);
+			}
+			costs.keySet().removeIf(s -> !items.contains(s));
+		}
+
+		/**
+		 * Getting the set of available cost.
+		 * @return The set of cost.
+		 */
+		public Set<String> getItems() {
+			return new HashSet<>(items);
+		}
+		/**
+		 * Getting the set of available cost linked.
+		 * @return The set of linked cost.
+		 */
+		public Set<String> getLinkedItems() {
+			return items;
+		}
+
+		/**
+		 * Getting the amount of the specified item.
+		 * @param item The item available in the costs.
+		 * @return The amount of cost.
+		 */
+		public int getAmount(String item) {
+			return costs.get(item);
+		}
+
+		/**
+		 * Adding the cost into the list. Adding to the original value if existed.
+		 * @param item The item as cost.
+		 * @param amount The amount of the item required as cost.
+		 * @return {@code true} if original value exists.
+		 */
+		public boolean addCost(String item, int amount) { return addCost(item, amount, false); }
+		/**
+		 * Adding the cost into the list.
+		 * @param item The item as cost.
+		 * @param amount The amount of the item required as cost.
+		 * @param replace Whether to replace the original value if existed or add to the value.
+		 * @return {@code true} if original value exists.
+		 */
+		public boolean addCost(String item, int amount, boolean replace) {
+			items.add(item);
+			if (replace || !costs.containsKey(item))
+				return costs.put(item, amount) != null;
+			else
+				costs.put(item, costs.get(item) + amount);
+			return true;
+		}
+
+		/**
+		 * Setting the cost map values and reset the item list by the keys.
+		 * @param costs The cost map.
+		 */
+		public void setCosts(HashMap<String, Integer> costs) {
+			this.costs.clear();
+			this.costs.putAll(costs);
+			items.clear();
+			items.addAll(costs.keySet());
+		}
+		/**
+		 * Setting the cost map to the given instance and reset the item list by the keys.
+		 * @param costs The cost map.
+		 */
+		public void setLinkedCosts(HashMap<String, Integer> costs) {
+			this.costs = costs;
+			items.clear();
+			items.addAll(costs.keySet());
+		}
+
+		/**
+		 * Getting the cost map.
+		 * @return The new cost map instance.
+		 */
+		public HashMap<String, Integer> getCosts() {
+			return new HashMap<>(costs);
+		}
+		/**
+		 * Getting the cost map instance.
+		 * @return The cost map instance.
+		 */
+		public HashMap<String, Integer> getLinkedCosts() {
+			return costs;
+		}
+
+		@Override
+		public boolean equals(Object o) {
+			if (this == o) return true;
+			else if (o instanceof RecipeCost) {
+				return defaultAmount == ((RecipeCost) o).defaultAmount &&
+					costs.equals(((RecipeCost) o).costs) &&
+					items.equals(((RecipeCost) o).items);
+			} else
+				return false;
+		}
+
+		@Override
+		public int hashCode() {
+			return 31 * (31 * (costs.hashCode() + items.hashCode()) + defaultAmount);
+		}
+	}
 }
