import codechicken.diffpatch.DiffPatch
import groovy.io.FileType
import org.apache.commons.io.FileUtils

import java.util.regex.Matcher

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
    }
    dependencies {
        classpath("net.minecraftforge:DiffPatch:2.+")
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'application'
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

project.version = '2.0.7'

sourceCompatibility = 8
mainClassName = 'minicraft.core.Game'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenCentral()

    maven {
        url "https://www.jabylon.org/maven/"
    }
}

dependencies {
    api project(path: ":minicraft-base:source", configuration: "shadow")
}

java {
    withSourcesJar()
}

tasks.register('patchGen') {
    doLast {
        def dir = file("patches/minicraft/")
        def aDir = file("patches/a/")
        def bDir = file("patches/b/")
        def dirPatches = file("patches")
        aDir.eachFileRecurse (FileType.FILES) { file ->
            def diffDir = aDir.toPath().relativize(file.toPath())
            println "Differing " + file.getPath()
            def patchFile = dir.toPath().resolve(diffDir.toString() + ".patch")
            DiffPatch.mainI(new String[] { "-o" , patchFile.toString() , "-d",
                    aDir.toPath().resolve(diffDir).toString(), bDir.toPath().resolve(diffDir).toString() }, System.err, System.out)
            def updatedContent = patchFile.getText("UTF-8").replaceFirst(Matcher.quoteReplacement(dirPatches.toPath().toString()+"\\"), "")
                    .replaceFirst(Matcher.quoteReplacement(dirPatches.toPath().toString()+"\\"), "") // Remove redundant file paths
            patchFile.write(updatedContent, "UTF-8")
        }
    }
}

tasks.register('patchSourceGen') {
    doLast {
        FileUtils.cleanDirectory(file("patches/a")) // Delete original files
        def dir = file("source/src/main/java/")
        def aDir = file("patches/a/")
        def bDir = file("patches/b/")
        bDir.eachFileRecurse (FileType.FILES) { file ->
            def diffDir = bDir.toPath().relativize(file.toPath())
            if (!diffDir.startsWith("minicraft")) return
            copy {
                from dir.toPath().resolve(diffDir).toFile()
                into aDir.toPath().resolve(diffDir.parent).toFile()
            }
        }
    }
}

tasks.register("patchRefresh")
tasks.named("patchRefresh").get().finalizedBy tasks.named("patchGen").get(), tasks.named("patchSourceGen").get()

sourceSets {
    main {
        java { // Getting all dirs.
            def dir = file("patches/minicraft/")
            def tmpDir = file("build/tmp/patches/")
            def javaSrcDir = file("source/src/main/java/")
            tmpDir.mkdirs()
            FileUtils.cleanDirectory(tmpDir)
            copy { // Copy all files
                from javaSrcDir
                into tmpDir
            }

            dir.eachFileRecurse (FileType.FILES) { file ->
                def patcherDir = dir.toPath().relativize(file.toPath()).toString()
                patcherDir = patcherDir.substring(0, patcherDir.length() - 6) // Remove extension

                println "Executing patcher for " + file.getPath()
                DiffPatch.mainI(new String[] { "-o" , tmpDir.toPath().resolve(patcherDir).toString() , "-p",
                        javaSrcDir.toPath().resolve(patcherDir).toString(), file.getPath() }, System.err, System.out)
            }

            srcDir tmpDir.getPath()
        }
    }
}

tasks.distZip.doFirst {
    duplicatesStrategy = DuplicatesStrategy.WARN
}

tasks.distTar.doFirst {
    duplicatesStrategy = DuplicatesStrategy.WARN
}

shadowJar {
    archivesBaseName = 'minicraft_plus'
    archiveClassifier.set('')
}
